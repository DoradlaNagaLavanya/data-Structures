Question
-----------
-------------
Given a  2D Array, :

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
An hourglass in  is a subset of values with indices falling in this pattern in 's graphical representation:

a b c
  d
e f g
There are  hourglasses in . An hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in , then print the maximum hourglass sum. The array will always be .

Example
-9 -9 -9  1 1 1 
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0
 
The  hourglass sums are:
-63, -34, -9, 12, 
-10,   0, 28, 23, 
-27, -11, -2, 10, 
  9,  17, 25, 18

The highest hourglass sum is  from the hourglass beginning at row , column :
0 4 3
  1
8 6 6
Note: If you have already solved the Java domain's Java 2D Array challenge, you may wish to skip this challenge.

Function Description
Complete the function hourglassSum in the editor below.

hourglassSum has the following parameter(s):
int arr[6][6]: an array of integers

Returns
int: the maximum hourglass sum

Input Format
Each of the  lines of inputs  contains  space-separated integers .

Output Format
Print the largest (maximum) hourglass sum found in .

Sample Input
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0

Sample Output
19

Explanation
contains the following hourglasses:

The hourglass with the maximum sum () is:

2 4 4
  2
1 2 4

SourceCode
------------
----------------


#include<stdio.h>
int main()
{
    int a[6][6],i,j,s[100],k[100],t;
    for(i=0;i<6;i++)
    {
        for(j=0;j<6;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    for(j=0;j<3;j++)
        s[0]+=a[0][j];
    for(j=1;j<4;j++)
        s[1]+=a[0][j];
     for(j=2;j<5;j++)
        s[2]+=a[0][j];
     for(j=3;j<6;j++)
        s[3]+=a[0][j];
     for(j=0;j<3;j++)
        s[4]+=a[1][j];
      for(j=1;j<4;j++)
        s[5]+=a[1][j];
      for(j=2;j<5;j++)
        s[6]+=a[1][j];
      for(j=3;j<6;j++)
        s[7]+=a[1][j];
      for(j=0;j<3;j++)
        s[8]+=a[2][j];
      for(j=1;j<4;j++)
        s[9]+=a[2][j];
      for(j=2;j<5;j++)
        s[10]+=a[2][j];
      for(j=3;j<6;j++)
        s[11]+=a[2][j];
      for(j=0;j<3;j++)
        s[12]+=a[3][j];
    for(j=1;j<4;j++)
        s[13]+=a[3][j];
    for(j=2;j<5;j++)
        s[14]+=a[3][j];
    for(j=3;j<6;j++)
        s[15]+=a[3][j];
     for(j=0;j<3;j++)
        s[16]+=a[4][j];
    for(j=1;j<4;j++)
        s[17]+=a[4][j];
    for(j=2;j<5;j++)
        s[18]+=a[4][j];
    for(j=3;j<6;j++)
        s[19]+=a[4][j];
     for(j=0;j<3;j++)
        s[20]+=a[5][j];
    for(j=1;j<4;j++)
        s[21]+=a[5][j];
    for(j=2;j<5;j++)
        s[22]+=a[5][j];
    for(j=3;j<6;j++)
        s[23]+=a[5][j];
    k[0]=s[0]+s[8]+a[1][1];
    k[1]=s[1]+s[9]+a[1][2];
    k[2]=s[2]+s[10]+a[1][3];
    k[3]=s[3]+s[11]+a[1][4];
    k[4]=s[4]+s[12]+a[2][1];
    k[5]=s[5]+s[13]+a[2][2];
    k[6]=s[6]+s[14]+a[2][3];
    k[7]=s[7]+s[15]+a[2][4];
    k[8]=s[8]+s[16]+a[3][1];
    k[9]=s[9]+s[17]+a[3][2];
    k[10]=s[10]+s[18]+a[3][3];
    k[11]=s[11]+s[19]+a[3][4];
    k[12]=s[12]+s[20]+a[4][1];
    k[13]=s[13]+s[21]+a[4][2];
    k[14]=s[14]+s[22]+a[4][3];
    k[15]=s[15]+s[23]+a[4][4];
    for(i=1;i<16;i++)
    {
        if(k[0]<k[i])
        {
            t=k[0];
            k[0]=k[i];
            k[i]=t;
        }
    }
    printf("%d",k[0]);
return 0;
}
